{"version":3,"file":"static/webpack/static\\development\\pages\\formBuilder.js.8c4216b42e5f594d935e.hot-update.js","sources":["webpack:///./pages/formBuilder/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//Seed\r\nimport formElements from './seed';\r\n\r\n//form elements\r\nimport {\r\n    FormBuilderInput,\r\n    FormBuilderTextArea\r\n} from \"./allElements\";\r\n\r\nclass FormBuilder extends Component {\r\n    state = {\r\n        inputCount: 0,\r\n        formElements\r\n    }\r\n\r\n    // DRAG AND DROP\r\n    // store the temp data while dragging\r\n    onDragStart = (e, id) => {\r\n        e.dataTransfer.setData(\"id\", id);\r\n    }\r\n    // removes default on element drop\r\n    onDragOver = (e) => {\r\n        e.preventDefault();\r\n    }\r\n    // gets the data that is being dragged\r\n    onDrop = (e, added) => {\r\n        let id = parseInt(e.dataTransfer.getData(\"id\"));\r\n        // Update the inputs object with new drop data\r\n        let inputs = this.state.formElements.filter((elem) => {\r\n            if(elem.id === id){\r\n                elem.added = added\r\n            }\r\n            return inputs;\r\n        });\r\n        // Update the state\r\n        this.setState({\r\n            ...this.state,\r\n            inputs\r\n        })\r\n    }\r\n\r\n    // Removes unnecessary characters in name\r\n    removeCharacters = (name) => {\r\n        let n = name.toLocaleLowerCase()\r\n        return n.replace(/\\s/g, '');\r\n    }\r\n\r\n    editInput = (e) => {\r\n        //\r\n    }\r\n\r\n    render(){\r\n        // Declare empty arrays to push information into\r\n        var inputs = {\r\n            true: [],\r\n            false: []\r\n        }\r\n        // Sort the elements based off of added or not to the builder\r\n        // Builds out the html depending on if it has been added or not\r\n        this.state.formElements.forEach((elem) => {\r\n            // FALSE\r\n            if(elem.added == false){\r\n                inputs[elem.added].push(\r\n                    <div onDragStart={(e) => this.onDragStart(e, elem.id)}\r\n                        draggable key={elem.id}\r\n                        className=\"draggableItem\"\r\n                    >{elem.name}</div>\r\n                )\r\n            // TRUE\r\n            } else {\r\n                // Create the element\r\n                let elementID = this.removeCharacters(elem.name)+elem.order;\r\n                let element = React.createElement(elem.elementType, {\r\n                    type: elem.type,\r\n                    name: elem.value,\r\n                    placeholder: elem.description,\r\n                    id: elementID\r\n                });\r\n                inputs[elem.added].push(\r\n                    <div onDragStart={(e) => this.onDragStart(e, elem.id)}\r\n                        draggable key={elem.id}\r\n                        on\r\n                        className=\"draggableItem\"\r\n                    >\r\n                        {// Add the dynamic element to the page\r\n                            element\r\n                        }\r\n                        <a onClick={this.editInput}>Edit</a>\r\n                        <a>Remove</a>\r\n                    </div>\r\n                )   \r\n            }\r\n        });\r\n\r\n        return (\r\n            <div id=\"formBuilder\">\r\n                <div className=\"container\">\r\n                    <div className=\"left\">\r\n                        <div className=\"inputDragArea\" \r\n                            onDragOver={(e) => this.onDragOver(e)}\r\n                            onDrop={(e)=> this.onDrop(e, false)}>\r\n                            {inputs.false}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <form className=\"creator\">\r\n                            <div className=\"dragArea\"\r\n                                onDragOver={(e) => this.onDragOver(e)}\r\n                                onDrop={(e)=> this.onDrop(e, true)}>\r\n                                {inputs.true}\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default FormBuilder;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AANA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AA3GA;AACA;AA4GA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}